#!/bin/bash

# Dotfiles installation script
# Backs up existing dotfiles and creates symlinks to this repository

set -euo pipefail # Exit on error, undefined vars, pipe failures

# Get the directory where this script is located
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
BACKUP_DIR="$HOME/dotfiles_old_$(date +%Y%m%d_%H%M%S)"

# Function to print colored output
print_status() {
  echo -e "\033[0;32m[INFO]\033[0m $1"
}

print_error() {
  echo -e "\033[0;31m[ERROR]\033[0m $1" >&2
}

print_warning() {
  echo -e "\033[0;33m[WARNING]\033[0m $1"
}

# Function to backup existing file/directory
backup_if_exists() {
  local target="$1"
  local backup_name="$2"

  if [[ -e "$target" || -L "$target" ]]; then
    if [[ ! -d "$BACKUP_DIR" ]]; then
      mkdir -p "$BACKUP_DIR"
      print_status "Created backup directory: $BACKUP_DIR"
    fi

    print_status "Backing up $target to $BACKUP_DIR/$backup_name"
    mv "$target" "$BACKUP_DIR/$backup_name"
    return 0
  fi
  return 1
}

# Function to create symlink with error handling
create_symlink() {
  local source="$1"
  local target="$2"
  local target_dir="$(dirname "$target")"

  # Ensure target directory exists
  if [[ ! -d "$target_dir" ]]; then
    print_status "Creating directory: $target_dir"
    mkdir -p "$target_dir"
  fi

  # Check if target already exists and is the correct symlink
  if [[ -L "$target" ]] && [[ "$(readlink "$target")" == "$source" ]]; then
    print_status "Symlink already exists and is correct: $target"
    return 0
  fi

  # Backup existing file/directory if it exists
  backup_if_exists "$target" "$(basename "$target")"

  # Create the symlink
  print_status "Creating symlink: $target -> $source"
  ln -s "$source" "$target"
}

print_status "Starting dotfiles installation from: $SCRIPT_DIR"

# Get list of dotfiles (exclude install script, config directory, and common non-dotfiles)
dotfiles=()
while IFS= read -r -d '' file; do
  filename="$(basename "$file")"
  # Skip install script, config directory, hidden files, and directories that shouldn't be top-level dotfiles
  if [[ "$filename" != "install" &&
    "$filename" != "config" &&
    "$filename" != ".git" &&
    "$filename" != ".gitignore" &&
    "$filename" != "README.md" &&
    "$filename" != "alacritty" &&
    "$filename" != "vim" ]]; then
    dotfiles+=("$filename")
  fi
done < <(find "$SCRIPT_DIR" -maxdepth 1 -type f -print0)

# Add directories that should be symlinked as dotfiles
for dir in vim; do
  if [[ -d "$SCRIPT_DIR/$dir" ]]; then
    dotfiles+=("$dir")
  fi
done

print_status "Found dotfiles: ${dotfiles[*]}"

# Process regular dotfiles (symlink to ~/.<filename>)
for file in "${dotfiles[@]}"; do
  source_path="$SCRIPT_DIR/$file"
  target_path="$HOME/.$file"
  create_symlink "$source_path" "$target_path"
done

# Process config files (symlink to ~/.config/<filename>)
if [[ -d "$SCRIPT_DIR/config" ]]; then
  print_status "Processing config files..."

  while IFS= read -r -d '' config_file; do
    filename="$(basename "$config_file")"
    source_path="$config_file"
    target_path="$HOME/.config/$filename"
    create_symlink "$source_path" "$target_path"
  done < <(find "$SCRIPT_DIR/config" -mindepth 1 -maxdepth 1 -print0)
fi

print_status "Dotfiles installation completed successfully!"

if [[ -d "$BACKUP_DIR" ]]; then
  print_status "Backed up files are in: $BACKUP_DIR"
  print_warning "You can safely remove the backup directory after verifying everything works correctly"
else
  print_status "No existing files needed to be backed up"
fi

print_status "Installation summary:"
echo "  - Dotfiles symlinked to: $HOME"
echo "  - Config files symlinked to: $HOME/.config"
echo "  - Source directory: $SCRIPT_DIR"
